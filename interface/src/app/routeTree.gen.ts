/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SettingsImport } from './routes/settings'
import { Route as IndexImport } from './routes/index'
import { Route as TrackerIndexImport } from './routes/tracker.index'
import { Route as SettingsIndexImport } from './routes/settings.index'
import { Route as ProjectsIndexImport } from './routes/projects.index'
import { Route as ProjectsProjectIdImport } from './routes/projects.$projectId'

// Create/Update Routes

const SettingsRoute = SettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const TrackerIndexRoute = TrackerIndexImport.update({
  id: '/tracker/',
  path: '/tracker/',
  getParentRoute: () => rootRoute,
} as any)

const SettingsIndexRoute = SettingsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => SettingsRoute,
} as any)

const ProjectsIndexRoute = ProjectsIndexImport.update({
  id: '/projects/',
  path: '/projects/',
  getParentRoute: () => rootRoute,
} as any)

const ProjectsProjectIdRoute = ProjectsProjectIdImport.update({
  id: '/projects/$projectId',
  path: '/projects/$projectId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsImport
      parentRoute: typeof rootRoute
    }
    '/projects/$projectId': {
      id: '/projects/$projectId'
      path: '/projects/$projectId'
      fullPath: '/projects/$projectId'
      preLoaderRoute: typeof ProjectsProjectIdImport
      parentRoute: typeof rootRoute
    }
    '/projects/': {
      id: '/projects/'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof ProjectsIndexImport
      parentRoute: typeof rootRoute
    }
    '/settings/': {
      id: '/settings/'
      path: '/'
      fullPath: '/settings/'
      preLoaderRoute: typeof SettingsIndexImport
      parentRoute: typeof SettingsImport
    }
    '/tracker/': {
      id: '/tracker/'
      path: '/tracker'
      fullPath: '/tracker'
      preLoaderRoute: typeof TrackerIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface SettingsRouteChildren {
  SettingsIndexRoute: typeof SettingsIndexRoute
}

const SettingsRouteChildren: SettingsRouteChildren = {
  SettingsIndexRoute: SettingsIndexRoute,
}

const SettingsRouteWithChildren = SettingsRoute._addFileChildren(
  SettingsRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/settings': typeof SettingsRouteWithChildren
  '/projects/$projectId': typeof ProjectsProjectIdRoute
  '/projects': typeof ProjectsIndexRoute
  '/settings/': typeof SettingsIndexRoute
  '/tracker': typeof TrackerIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/projects/$projectId': typeof ProjectsProjectIdRoute
  '/projects': typeof ProjectsIndexRoute
  '/settings': typeof SettingsIndexRoute
  '/tracker': typeof TrackerIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/settings': typeof SettingsRouteWithChildren
  '/projects/$projectId': typeof ProjectsProjectIdRoute
  '/projects/': typeof ProjectsIndexRoute
  '/settings/': typeof SettingsIndexRoute
  '/tracker/': typeof TrackerIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/settings'
    | '/projects/$projectId'
    | '/projects'
    | '/settings/'
    | '/tracker'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/projects/$projectId' | '/projects' | '/settings' | '/tracker'
  id:
    | '__root__'
    | '/'
    | '/settings'
    | '/projects/$projectId'
    | '/projects/'
    | '/settings/'
    | '/tracker/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SettingsRoute: typeof SettingsRouteWithChildren
  ProjectsProjectIdRoute: typeof ProjectsProjectIdRoute
  ProjectsIndexRoute: typeof ProjectsIndexRoute
  TrackerIndexRoute: typeof TrackerIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SettingsRoute: SettingsRouteWithChildren,
  ProjectsProjectIdRoute: ProjectsProjectIdRoute,
  ProjectsIndexRoute: ProjectsIndexRoute,
  TrackerIndexRoute: TrackerIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/settings",
        "/projects/$projectId",
        "/projects/",
        "/tracker/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/settings": {
      "filePath": "settings.tsx",
      "children": [
        "/settings/"
      ]
    },
    "/projects/$projectId": {
      "filePath": "projects.$projectId.tsx"
    },
    "/projects/": {
      "filePath": "projects.index.tsx"
    },
    "/settings/": {
      "filePath": "settings.index.tsx",
      "parent": "/settings"
    },
    "/tracker/": {
      "filePath": "tracker.index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
