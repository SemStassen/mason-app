/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/root'
import { Route as trackerIndexImport } from './routes/tracker/index'
import { Route as settingsLayoutImport } from './routes/settings/layout'
import { Route as indexImport } from './routes/index'
import { Route as projectsProjectUuidIndexImport } from './routes/projects/$projectUuid/index'
import { Route as settingsIndexImport } from './routes/settings/index'
import { Route as projectsIndexImport } from './routes/projects/index'

// Create Virtual Routes

const ProjectsImport = createFileRoute('/projects')()

// Create/Update Routes

const trackerIndexRoute = trackerIndexImport.update({
  id: '/tracker',
  path: '/tracker',
  getParentRoute: () => rootRoute,
} as any)

const settingsLayoutRoute = settingsLayoutImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any)

const ProjectsRoute = ProjectsImport.update({
  id: '/projects',
  path: '/projects',
  getParentRoute: () => rootRoute,
} as any)

const indexRoute = indexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const projectsProjectUuidIndexRoute = projectsProjectUuidIndexImport.update({
  id: '/$projectUuid',
  path: '/$projectUuid',
  getParentRoute: () => ProjectsRoute,
} as any)

const settingsIndexRoute = settingsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => settingsLayoutRoute,
} as any)

const projectsIndexRoute = projectsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProjectsRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof indexImport
      parentRoute: typeof rootRoute
    }
    '/projects': {
      id: '/projects'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof ProjectsImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof settingsLayoutImport
      parentRoute: typeof rootRoute
    }
    '/tracker': {
      id: '/tracker'
      path: '/tracker'
      fullPath: '/tracker'
      preLoaderRoute: typeof trackerIndexImport
      parentRoute: typeof rootRoute
    }
    '/projects/': {
      id: '/projects/'
      path: '/'
      fullPath: '/projects/'
      preLoaderRoute: typeof projectsIndexImport
      parentRoute: typeof ProjectsImport
    }
    '/settings/': {
      id: '/settings/'
      path: '/'
      fullPath: '/settings/'
      preLoaderRoute: typeof settingsIndexImport
      parentRoute: typeof settingsLayoutImport
    }
    '/projects/$projectUuid': {
      id: '/projects/$projectUuid'
      path: '/$projectUuid'
      fullPath: '/projects/$projectUuid'
      preLoaderRoute: typeof projectsProjectUuidIndexImport
      parentRoute: typeof ProjectsImport
    }
  }
}

// Create and export the route tree

interface ProjectsRouteChildren {
  projectsIndexRoute: typeof projectsIndexRoute
  projectsProjectUuidIndexRoute: typeof projectsProjectUuidIndexRoute
}

const ProjectsRouteChildren: ProjectsRouteChildren = {
  projectsIndexRoute: projectsIndexRoute,
  projectsProjectUuidIndexRoute: projectsProjectUuidIndexRoute,
}

const ProjectsRouteWithChildren = ProjectsRoute._addFileChildren(
  ProjectsRouteChildren,
)

interface settingsLayoutRouteChildren {
  settingsIndexRoute: typeof settingsIndexRoute
}

const settingsLayoutRouteChildren: settingsLayoutRouteChildren = {
  settingsIndexRoute: settingsIndexRoute,
}

const settingsLayoutRouteWithChildren = settingsLayoutRoute._addFileChildren(
  settingsLayoutRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof indexRoute
  '/projects': typeof ProjectsRouteWithChildren
  '/settings': typeof settingsLayoutRouteWithChildren
  '/tracker': typeof trackerIndexRoute
  '/projects/': typeof projectsIndexRoute
  '/settings/': typeof settingsIndexRoute
  '/projects/$projectUuid': typeof projectsProjectUuidIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof indexRoute
  '/tracker': typeof trackerIndexRoute
  '/projects': typeof projectsIndexRoute
  '/settings': typeof settingsIndexRoute
  '/projects/$projectUuid': typeof projectsProjectUuidIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof indexRoute
  '/projects': typeof ProjectsRouteWithChildren
  '/settings': typeof settingsLayoutRouteWithChildren
  '/tracker': typeof trackerIndexRoute
  '/projects/': typeof projectsIndexRoute
  '/settings/': typeof settingsIndexRoute
  '/projects/$projectUuid': typeof projectsProjectUuidIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/projects'
    | '/settings'
    | '/tracker'
    | '/projects/'
    | '/settings/'
    | '/projects/$projectUuid'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/tracker' | '/projects' | '/settings' | '/projects/$projectUuid'
  id:
    | '__root__'
    | '/'
    | '/projects'
    | '/settings'
    | '/tracker'
    | '/projects/'
    | '/settings/'
    | '/projects/$projectUuid'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  indexRoute: typeof indexRoute
  ProjectsRoute: typeof ProjectsRouteWithChildren
  settingsLayoutRoute: typeof settingsLayoutRouteWithChildren
  trackerIndexRoute: typeof trackerIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  indexRoute: indexRoute,
  ProjectsRoute: ProjectsRouteWithChildren,
  settingsLayoutRoute: settingsLayoutRouteWithChildren,
  trackerIndexRoute: trackerIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "root.tsx",
      "children": [
        "/",
        "/projects",
        "/settings",
        "/tracker"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/projects": {
      "filePath": "",
      "children": [
        "/projects/",
        "/projects/$projectUuid"
      ]
    },
    "/settings": {
      "filePath": "settings/layout.tsx",
      "children": [
        "/settings/"
      ]
    },
    "/tracker": {
      "filePath": "tracker/index.tsx"
    },
    "/projects/": {
      "filePath": "projects/index.tsx",
      "parent": "/projects"
    },
    "/settings/": {
      "filePath": "settings/index.tsx",
      "parent": "/settings"
    },
    "/projects/$projectUuid": {
      "filePath": "projects/$projectUuid/index.tsx",
      "parent": "/projects"
    }
  }
}
ROUTE_MANIFEST_END */
