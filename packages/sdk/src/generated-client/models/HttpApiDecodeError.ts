/* tslint:disable */
/* eslint-disable */
/**
 * Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Issue } from './Issue';
import {
    IssueFromJSON,
    IssueFromJSONTyped,
    IssueToJSON,
    IssueToJSONTyped,
} from './Issue';

/**
 * The request did not match the expected schema
 * @export
 * @interface HttpApiDecodeError
 */
export interface HttpApiDecodeError {
    /**
     * 
     * @type {Array<Issue>}
     * @memberof HttpApiDecodeError
     */
    issues: Array<Issue>;
    /**
     * 
     * @type {string}
     * @memberof HttpApiDecodeError
     */
    message: string;
    /**
     * 
     * @type {string}
     * @memberof HttpApiDecodeError
     */
    tag: HttpApiDecodeErrorTagEnum;
}


/**
 * @export
 */
export const HttpApiDecodeErrorTagEnum = {
    HttpApiDecodeError: 'HttpApiDecodeError'
} as const;
export type HttpApiDecodeErrorTagEnum = typeof HttpApiDecodeErrorTagEnum[keyof typeof HttpApiDecodeErrorTagEnum];


/**
 * Check if a given object implements the HttpApiDecodeError interface.
 */
export function instanceOfHttpApiDecodeError(value: object): value is HttpApiDecodeError {
    if (!('issues' in value) || value['issues'] === undefined) return false;
    if (!('message' in value) || value['message'] === undefined) return false;
    if (!('tag' in value) || value['tag'] === undefined) return false;
    return true;
}

export function HttpApiDecodeErrorFromJSON(json: any): HttpApiDecodeError {
    return HttpApiDecodeErrorFromJSONTyped(json, false);
}

export function HttpApiDecodeErrorFromJSONTyped(json: any, ignoreDiscriminator: boolean): HttpApiDecodeError {
    if (json == null) {
        return json;
    }
    return {
        
        'issues': ((json['issues'] as Array<any>).map(IssueFromJSON)),
        'message': json['message'],
        'tag': json['_tag'],
    };
}

export function HttpApiDecodeErrorToJSON(json: any): HttpApiDecodeError {
    return HttpApiDecodeErrorToJSONTyped(json, false);
}

export function HttpApiDecodeErrorToJSONTyped(value?: HttpApiDecodeError | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'issues': ((value['issues'] as Array<any>).map(IssueToJSON)),
        'message': value['message'],
        '_tag': value['tag'],
    };
}

