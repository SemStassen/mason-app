/* tslint:disable */
/* eslint-disable */
/**
 * Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PropertyKey } from './PropertyKey';
import {
    PropertyKeyFromJSON,
    PropertyKeyFromJSONTyped,
    PropertyKeyToJSON,
    PropertyKeyToJSONTyped,
} from './PropertyKey';

/**
 * Represents an error encountered while parsing a value to match the schema
 * @export
 * @interface Issue
 */
export interface Issue {
    /**
     * The tag identifying the type of parse issue
     * @type {string}
     * @memberof Issue
     */
    tag: IssueTagEnum;
    /**
     * The path to the property where the issue occurred
     * @type {Array<PropertyKey>}
     * @memberof Issue
     */
    path: Array<PropertyKey>;
    /**
     * A descriptive message explaining the issue
     * @type {string}
     * @memberof Issue
     */
    message: string;
}


/**
 * @export
 */
export const IssueTagEnum = {
    Pointer: 'Pointer',
    Unexpected: 'Unexpected',
    Missing: 'Missing',
    Composite: 'Composite',
    Refinement: 'Refinement',
    Transformation: 'Transformation',
    Type: 'Type',
    Forbidden: 'Forbidden'
} as const;
export type IssueTagEnum = typeof IssueTagEnum[keyof typeof IssueTagEnum];


/**
 * Check if a given object implements the Issue interface.
 */
export function instanceOfIssue(value: object): value is Issue {
    if (!('tag' in value) || value['tag'] === undefined) return false;
    if (!('path' in value) || value['path'] === undefined) return false;
    if (!('message' in value) || value['message'] === undefined) return false;
    return true;
}

export function IssueFromJSON(json: any): Issue {
    return IssueFromJSONTyped(json, false);
}

export function IssueFromJSONTyped(json: any, ignoreDiscriminator: boolean): Issue {
    if (json == null) {
        return json;
    }
    return {
        
        'tag': json['_tag'],
        'path': ((json['path'] as Array<any>).map(PropertyKeyFromJSON)),
        'message': json['message'],
    };
}

export function IssueToJSON(json: any): Issue {
    return IssueToJSONTyped(json, false);
}

export function IssueToJSONTyped(value?: Issue | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        '_tag': value['tag'],
        'path': ((value['path'] as Array<any>).map(PropertyKeyToJSON)),
        'message': value['message'],
    };
}

