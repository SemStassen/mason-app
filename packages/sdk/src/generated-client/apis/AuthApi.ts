/* tslint:disable */
/* eslint-disable */
/**
 * Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthGetSession200Response,
  AuthSendEmailVerificationOTP200Response,
  AuthSendEmailVerificationOTPRequest,
  AuthSignInWithEmailOTPRequest,
  HttpApiDecodeError,
} from '../models/index';
import {
    AuthGetSession200ResponseFromJSON,
    AuthGetSession200ResponseToJSON,
    AuthSendEmailVerificationOTP200ResponseFromJSON,
    AuthSendEmailVerificationOTP200ResponseToJSON,
    AuthSendEmailVerificationOTPRequestFromJSON,
    AuthSendEmailVerificationOTPRequestToJSON,
    AuthSignInWithEmailOTPRequestFromJSON,
    AuthSignInWithEmailOTPRequestToJSON,
    HttpApiDecodeErrorFromJSON,
    HttpApiDecodeErrorToJSON,
} from '../models/index';

export interface AuthSendEmailVerificationOTPOperationRequest {
    authSendEmailVerificationOTPRequest: AuthSendEmailVerificationOTPRequest;
}

export interface AuthSignInWithEmailOTPOperationRequest {
    authSignInWithEmailOTPRequest: AuthSignInWithEmailOTPRequest;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     */
    async authGetSessionRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthGetSession200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/auth/session`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthGetSession200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async authGetSession(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthGetSession200Response> {
        const response = await this.authGetSessionRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async authSendEmailVerificationOTPRaw(requestParameters: AuthSendEmailVerificationOTPOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthSendEmailVerificationOTP200Response>> {
        if (requestParameters['authSendEmailVerificationOTPRequest'] == null) {
            throw new runtime.RequiredError(
                'authSendEmailVerificationOTPRequest',
                'Required parameter "authSendEmailVerificationOTPRequest" was null or undefined when calling authSendEmailVerificationOTP().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/auth/email-otp`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthSendEmailVerificationOTPRequestToJSON(requestParameters['authSendEmailVerificationOTPRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthSendEmailVerificationOTP200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async authSendEmailVerificationOTP(authSendEmailVerificationOTPRequest: AuthSendEmailVerificationOTPRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthSendEmailVerificationOTP200Response> {
        const response = await this.authSendEmailVerificationOTPRaw({ authSendEmailVerificationOTPRequest: authSendEmailVerificationOTPRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async authSignInWithEmailOTPRaw(requestParameters: AuthSignInWithEmailOTPOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthSendEmailVerificationOTP200Response>> {
        if (requestParameters['authSignInWithEmailOTPRequest'] == null) {
            throw new runtime.RequiredError(
                'authSignInWithEmailOTPRequest',
                'Required parameter "authSignInWithEmailOTPRequest" was null or undefined when calling authSignInWithEmailOTP().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/auth/verify-email`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthSignInWithEmailOTPRequestToJSON(requestParameters['authSignInWithEmailOTPRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthSendEmailVerificationOTP200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async authSignInWithEmailOTP(authSignInWithEmailOTPRequest: AuthSignInWithEmailOTPRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthSendEmailVerificationOTP200Response> {
        const response = await this.authSignInWithEmailOTPRaw({ authSignInWithEmailOTPRequest: authSignInWithEmailOTPRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async authSignInWithGithubRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthSendEmailVerificationOTP200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/auth/github`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthSendEmailVerificationOTP200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async authSignInWithGithub(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthSendEmailVerificationOTP200Response> {
        const response = await this.authSignInWithGithubRaw(initOverrides);
        return await response.value();
    }

}
